# -*- coding: utf-8 -*-
"""LVADSUSR72-ARYAN_MITTAL-IA2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FAz-cs7Spd89jNvro1VXtSklwc9bWw7g
"""

import numpy as np
import pandas as pd

#q1
def rgb_to_grayscale(rgb_image):
    R = rgb_image[:, :, 0]
    G = rgb_image[:, :, 1]
    B = rgb_image[:, :, 2]

    grayscale_image = 0.2989 * R + 0.5870 * G + 0.1140 * B
    return grayscale_image

#Data given in the question
rgb_image = np.array([[[255, 0, 0], [0, 255, 0], [0, 0, 255]],
                      [[255, 255, 0], [255, 0, 255], [0, 255, 255]],
                      [[127, 127, 127], [200, 200, 200], [50, 50, 50]]])

grayscale_image = rgb_to_grayscale(rgb_image)
print("Grayscale Image:")
print(grayscale_image)

#q2

def normalize_data(data):
    means = np.mean(data, axis=0)
    stds = np.std(data, axis=0)

    normalized_data = (data - means) / stds

    return normalized_data


##assume health data is given
print(normalize_data(health_data))

#q3

def reorganize_sensor_data(sensor_data):
    flattened_sensor_data = sensor_data.reshape(sensor_data.shape[0], -1)
    return flattened_sensor_data


# assume sensor_data in the 3d array
reorganized_data = reorganize_sensor_data(sensor_data)

print("Reorganized Sensor Data:")
print(reorganized_data)

#q4
def calculate_performance_improvement(scores):
    first_game_scores = scores[:, 0]  # Scores of the first game (first column)
    last_game_scores = scores[:, -1]  # Scores of the last game (last column)

    # Compute improvement for each athlete
    improvement = last_game_scores - first_game_scores

    return improvement

performance_improvement = calculate_performance_improvement(scores)
print("Performance improvement for each athelete: ")
print(performance_improvement)

#q5


def calculate_average_last_three_subjects(scores):
    exempt_mask = (scores == -1)

    last_three_scores = scores[:, -3:]
    valid_scores = np.ma.masked_array(last_three_scores, mask=exempt_mask[:, -3:])
    average_scores = np.mean(valid_scores, axis=1)

    return average_scores


average_last_three_subjects = calculate_average_last_three_subjects(scores)

print("Average Score in Last Three Subjects for Each Student:")
print(average_last_three_subjects)

#q6

avg_monthly_temperature = {}

#q7

#assume data is the list of employess
df = pd.DataFrame(data)
filtered_df = df[(df['Age'] < 45) & (df['Department'] != 'HR')]
result = filtered_df[['Name', 'City']]

print(result)

#q8

# assume there is the given data

df = pd.DataFrame(data)
fruit_products = df[df['Category'] == 'Fruit']
average_price_fruit = fruit_products['Price'].mean()
potential_promotions = fruit_products[(fruit_products['Price'] > average_price_fruit) & (~fruit_products['Promotion'])]

print("Potential candidates for future promotions:")
print(potential_promotions)

#q9

# Employee data
employee_data = {
    'Employee': ['Alice', 'Bob', 'Charlie', 'David'],
    'Department': ['HR', 'IT', 'Finance', 'IT'],
    'Manager': ['John', 'Rachel', 'Emily', 'Rachel']}
# Project data
project_data = {
    'Employee': ['Alice', 'Charlie', 'Eve'],
    'Project': ['P1', 'P3', 'P2']}


emp_df = pd.DataFrame(employee_data)
proj_df = pd.DataFrame(project_data)

#Merging two DataFrames based on the 'Employee' column
merged_df = pd.merge(proj_df, emp_df, on='Employee', how='left')

#Handle unassigned employees by filling missing values in 'Department' and 'Manager' columns
merged_df['Department'].fillna('Unassigned', inplace=True)
merged_df['Manager'].fillna('Unassigned', inplace=True)

print("Mapped Projects with Departments and Managers:")
print(merged_df)

#q10

data = {'Department':['Electronics','Electronics','Clothing','Clothing','Home goods'],
        'Salesperson':['Alice','Bob','Charlie','David','Eve'],
        'Sales':[70000,50000,30000,40000,60000]}

df = pd.DataFrame(data)

# Calculate average sales per salesperson in each department
avg_sales_per_salesperson = df.groupby('Department')['Sales'].mean()

# Rank the departments based on average sales
ranked_departments = avg_sales_per_salesperson.sort_values(ascending=False)

print("Average Sales per Salesperson in Each Department:")
print(avg_sales_per_salesperson)
print("\nRanking of Departments Based on Average Sales:")
print(ranked_departments)

